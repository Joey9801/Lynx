This software is designed to work on the Lynx dev r1 board, and other pin-compatible boards.
It takes in SPI data from SPI1, and generates streams of IQ values.
Error coding and constellation mapping is easily changeable.

Process:
The main loop of the program calls all the functions required to process the raw data into a constellation points.
Reading in the data, pulse shaping, and transmission are all handled via interrupts
At some stages in the main loop, these interrupts are enabled/disbaled.

There are a number of status variables that are changed by various bits of the program.
They are as follows:

constellation_ready 	- There is a packet ready to be mapped to a constellation
ecc_ready 		- There is a packet ready to be error coded
read_ready		- There is a free buffer for new data
currently_transmitting 	- There is a transmit currently happening
currently_reading 	- The current read buffer is still being filled

transmits_ready		- The number of buffers queued for transmitting



Buffers and pointers:
there are 2 defines which determine the nature of the buffers
PACKETLENGTH is the number of bytes in each packet
BUFFERS is the number of sets of buffers

There are 4 buffers which store data in its various stages through signal processing.
Until the packet has finished transmitting, the buffers relevant to that packet are all unique to that set.

packet_raw[BUFFERS][PACKETLENGTH] is the raw data
packet_ecc[BUFFERS][PACKETLENGTH*2] is the error coded data
packet_constellation[BUFFERS][PACKETLENGTH*8][2] is a set of IQ points on the constellation
next_transmit[2] is next sample to be transmitted. When no pulse shaping is used, this is the same as the current row of packet_constellation.

There are number of pointers to the buffers which mark how much each algorithm has done.

input_buffer points to the next/current packet_raw[][] which is to be written to
ecc_buffer points to the next packet_raw[][] to be processed into a packet_ecc[][]
constellation_buffer points to the next packet_ecc[][] to be processed into a packet_constellation[][][]
transmit_buffer points to the next/current buffer to be transmitted

There are also a few pointers+buffers to do with the fir filter. These are described later


Reading data in:
Turn on the SPI DR not empty interrupt
Set 'currently_reading'
Set the ready pin high; this lets the data source know we are accepting new data
The interrupt will now place the next PACKET_LENGTH recieved bytes into packet_raw[input_buffer][]
After the last byte is put into packet_raw, input_buffer is increased by 1.
Set ecc_ready, to start error coding.
If transmit_buffer != input_buffer, then input_buffer must be pointing at an available buffer, read_ready remains true.

Error coding data:
Call an error coding function. There are references inside the function to ecc_buffer.
After the last byte is put into packet_ecc, ecc_buffer is increased by 1.
If transmit_buffer != ecc_buffer, then ecc_buffer must be pointing at an available buffer status bit 2 remains high.
Set constellation_ready to start constellation mapping.

Constellation mapping data:
Call an constellation mapping function. There are references inside the function to constellation_buffer.
After the last byte is put into packet_constellation, constellation_buffer is increased by 1.
If transmit_buffer != constellation_buffer, then constellation_buffer must be pointing at an available buffer status bit 2 remains high.
Set transmit_ready to start transmit.



Cases 1 and 2 are immediately after ecc and constellation coding a packet
Cases 3 and 4 are immediately after the current packet has been transmitted

Case 1:
No transmission in progress
transmit_buffer must be the same as ecc_buffer-1
start the transmission timer as soon as constellation is coded
set currently_transmitting to true

Case 2:
Current transmission in progress
transmit_buffer =/= ecc_buffer
transmit_buffer =/= ecc_buffer-1
transmits_ready is increased by 1

Case 3:
transmits_ready = 0
transmission timer is stopped and set to 0
currently_transmitting is set to false

Case 4:
transmits_ready > 0
transmit_buffer is progressed one
transmits_ready -= 1

